name: AKS - Manual Start

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "START" to confirm cluster startup'
        required: true
        type: string

jobs:
  manual-start:
    runs-on: ubuntu-latest
    environment: Development
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Validate confirmation
        run: |
          if [[ "${{ github.event.inputs.confirm }}" != "START" ]]; then
            echo "‚ùå Confirmation failed. You must type 'START' to proceed."
            exit 1
          fi
          echo "‚úÖ Confirmation validated"

      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up variables
        run: |
          echo "AKS_RG=dev-zionet-learning-2025" >> $GITHUB_ENV
          echo "AKS_NAME=aks-cluster-dev" >> $GITHUB_ENV

      - name: Check current cluster status
        run: |
          STATUS=$(az aks show --resource-group $AKS_RG --name $AKS_NAME --query "powerState.code" -o tsv)
          echo "Current AKS cluster status: $STATUS"
          if [[ "$STATUS" == "Running" ]]; then
            echo "‚ö†Ô∏è Cluster is already running"
          fi

      - name: Start AKS cluster
        run: |
          echo "üöÄ Starting AKS cluster: $AKS_NAME in resource group: $AKS_RG"
          START_TIME=$(date +%s)
          az aks start --resource-group $AKS_RG --name $AKS_NAME
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "‚úÖ AKS cluster start command completed in ${DURATION} seconds"

      - name: Wait for cluster to be fully ready
        run: |
          echo "‚è≥ Waiting for cluster to be fully ready..."
          WAIT_START=$(date +%s)
          for i in {1..30}; do
            STATUS=$(az aks show --resource-group $AKS_RG --name $AKS_NAME --query "powerState.code" -o tsv)
            if [[ "$STATUS" == "Running" ]]; then
              WAIT_END=$(date +%s)
              WAIT_DURATION=$((WAIT_END - WAIT_START))
              echo "‚úÖ Cluster is running and ready after ${WAIT_DURATION} seconds"
              break
            fi
            echo "Attempt $i: Cluster status is $STATUS, waiting 30s..."
            sleep 30
          done

      - name: Verify cluster is running
        run: |
          STATUS=$(az aks show --resource-group $AKS_RG --name $AKS_NAME --query "powerState.code" -o tsv)
          echo "Final AKS cluster status: $STATUS"
          if [[ "$STATUS" == "Running" ]]; then
            echo "‚úÖ Cluster successfully started and running"
          else
            echo "‚ùå Unexpected status: $STATUS"
            exit 1
          fi

      - name: Show cluster info
        run: |
          echo "üìä Cluster information:"
          az aks show --resource-group $AKS_RG --name $AKS_NAME --query "{name:name, location:location, kubernetesVersion:kubernetesVersion, nodeResourceGroup:nodeResourceGroup}" -o table