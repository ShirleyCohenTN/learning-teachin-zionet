name: Deploy Frontend Apps to Azure Static Web Apps
run-name: >
  🚀 Deploy Frontend Apps (student, teacher, admin) to environment: ${{
    inputs.environment_name || github.event.inputs.environment_name || 'dev'
  }} | GitHub Environment: ${{ inputs.environment || github.event.inputs.environment || 'Development'}}
   
permissions:
   contents: read

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
    paths:
      - 'frontend/**'
  push:
    branches: [main]
    paths: ['frontend/**']    
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment (GitHub Environment)'
        required: true
        default: 'Development'
        type: choice
        options: [Development, Production]
      environment_name:
        description: 'lowercase letters & digits only (env identifier) where the application is deployed'
        required: true
        type: string
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      environment_name:
        required: true
        type: string
      app_insights_connection_string:
        required: false
        type: string
      deployment_token:
        required: false
        type: string
    secrets:
      AZURE_STATIC_WEB_APPS_API_TOKEN:
        required: false

concurrency:
  group: deploy-frontend-apps-${{ inputs.environment_name || github.event.inputs.environment_name || 'dev' }}
  cancel-in-progress: false

jobs:
  frontend-build-and-lint:
    runs-on: ubuntu-latest
    env:
      FE_DIR: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '${{ env.FE_DIR }}/package-lock.json'

      - name: Install Dependencies
        working-directory: ${{ env.FE_DIR }}
        run: npm ci

      - name: Lint Code
        working-directory: ${{ env.FE_DIR }}
        run: npm run lint

      - name: Create release name for Sentry (UTC + short SHA)
        run: |
          ts=$(date -u "+Release-%d-%m-%Y_%H-%M")
          echo "RELEASE_NAME=${ts}-${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build All Applications (Parallel)
        working-directory: ${{ env.FE_DIR }}
        env:
          VITE_AZURE_SPEECH_KEY: ""
          VITE_AZURE_REGION: "eastus"
          VITE_AZURE_OPENAI_KEY: ""
          VITE_AZURE_OPENAI_DEPLOYMENT_NAME: "gpt-4.1-mini"
          VITE_AZURE_OPENAI_API_VERSION: "2024-04-01-preview"
          VITE_AZURE_OPENAI_ENDPOINT: "https://france-teachin-open-ai.openai.azure.com/"
          VITE_APPINSIGHTS_CONNECTION_STRING: ""
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          RELEASE: ${{ env.RELEASE_NAME }}
        run: |
          echo "Starting parallel builds for all frontend applications..."
          
          # Start all builds in parallel
          npm run build:student &
          STUDENT_PID=$!
          echo "Started student build (PID: $STUDENT_PID)"
          
          npm run build:teacher &
          TEACHER_PID=$!
          echo "Started teacher build (PID: $TEACHER_PID)"
          
          npm run build:admin &
          ADMIN_PID=$!
          echo "Started admin build (PID: $ADMIN_PID)"
          
          # Wait for all builds to complete
          echo "Waiting for all builds to complete..."
          wait $STUDENT_PID && echo "Student build completed"
          wait $TEACHER_PID && echo "Teacher build completed" 
          wait $ADMIN_PID && echo "Admin build completed"
          
          echo "🚀 All frontend applications built successfully!"

      - name: Upload build artifacts
        if: |
         github.event_name == 'push' ||
         github.event_name == 'workflow_dispatch' ||
         github.event_name == 'workflow_call'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.FE_DIR }}/dist/
          retention-days: 1

  deploy:
    if: |
     github.event_name == 'push' ||
     github.event_name == 'workflow_dispatch' ||
     github.event_name == 'workflow_call'
    needs: [frontend-build-and-lint]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'Development' }}
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        app: [student, teacher, admin]
    env:
      FE_DIR: frontend
    steps:
      - uses: actions/checkout@v4

      # If triggered by PR merge, set default environment_name to dev
      - name: Set default environment_name for PR merge
        if: ${{ github.event_name == 'push' }}
        run: |
          echo "environment_name=dev" >> $GITHUB_ENV

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Compute resource names
        id: names
        shell: bash
        run: |
          set -euo pipefail
          ENV="${{ inputs.environment_name || env.environment_name}}"
          APP="${{ matrix.app }}"
          RG="${ENV}-zionet-learning-2025"
          SWA_NAME="static-web-app-${APP}-${ENV}"
          AI_NAME="${SWA_NAME}-appinsights"
          echo "rg=$RG" >> $GITHUB_OUTPUT
          echo "rg=$RG"
          echo "swa=$SWA_NAME" >> $GITHUB_OUTPUT
          echo "ai=$AI_NAME" >> $GITHUB_OUTPUT
       
      - name: Clean stage environment
        shell: bash
        run: |
          set -euo pipefail 

          # Get all staging environments for this Static Web App
          ENVIRONMENTS=$(az staticwebapp environment list \
            --name "${{ steps.names.outputs.swa }}" \
            --resource-group "${{ steps.names.outputs.rg }}" \
            --query "[?name != 'default'].{name:name, createdOn:createdOn}" \
            --output json)

          # Delete all staging environments
          for env in $(echo "$ENVIRONMENTS" | jq -r '.[].name'); do
            echo "Deleting staging environment: $env"
            az staticwebapp environment delete \
              --name "${{ steps.names.outputs.swa }}" \
              --resource-group "${{ steps.names.outputs.rg }}" \
              --environment-name "$env" \
              --yes || true
          done



      - name: Get App Insights connection string
        id: ai
        shell: bash
        run: |
          if [ -n "${{ inputs.app_insights_connection_string || '' }}" ]; then
            echo "Using provided App Insights connection strings from terraform output..."
            # Extract the connection string for the current app from the JSON object
            CONN=$(echo '${{ inputs.app_insights_connection_string }}' | jq -r '."${{ matrix.app }}"')
            if [ "$CONN" = "null" ] || [ -z "$CONN" ]; then
              echo "❌ No App Insights connection string found for app: ${{ matrix.app }}"
              exit 1
            fi
            echo "::add-mask::$CONN"
            echo "APPINSIGHTS_CONNECTION_STRING=$CONN" >> "$GITHUB_ENV"
          else
            echo "Fetching App Insights connection string from Azure CLI..."
            set -euo pipefail
            CONN=$(az resource show \
              -g "${{ steps.names.outputs.rg }}" \
              -n "${{ steps.names.outputs.ai }}" \
              --resource-type "Microsoft.Insights/components" \
              --query "properties.ConnectionString" -o tsv)
            if [ -z "$CONN" ]; then
              echo "❌ Could not resolve Application Insights connection string."
              exit 1
            fi
            echo "::add-mask::$CONN"
            echo "APPINSIGHTS_CONNECTION_STRING=$CONN" >> "$GITHUB_ENV"
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.FE_DIR }}/dist/

      - name: Get SWA deployment token
        id: swatoken
        shell: bash
        run: |
          if [ -n "${{ inputs.deployment_token || '' }}" ]; then
            echo "Using provided deployment tokens from terraform output..."
            # Extract the token for the current app from the JSON object
            TOKEN=$(echo '${{ inputs.deployment_token }}' | jq -r '."${{ matrix.app }}"')
            if [ "$TOKEN" = "null" ] || [ -z "$TOKEN" ]; then
              echo "❌ No deployment token found for app: ${{ matrix.app }}"
              exit 1
            fi
            echo "::add-mask::$TOKEN"
            echo "AZURE_STATIC_WEB_APPS_API_TOKEN=$TOKEN" >> "$GITHUB_ENV"
          else
            echo "Fetching deployment token from Azure CLI..."
            set -euo pipefail
            TOKEN=$(az staticwebapp secrets list \
              --name "${{ steps.names.outputs.swa }}" \
              --resource-group "${{ steps.names.outputs.rg }}" \
              --query "properties.apiKey" -o tsv)
            if [ -z "$TOKEN" ]; then
              echo "❌ Could not fetch Static Web Apps deployment token."
              exit 1
            fi
            echo "::add-mask::$TOKEN"
            echo "AZURE_STATIC_WEB_APPS_API_TOKEN=$TOKEN" >> "$GITHUB_ENV"
          fi

      - name: Deploy to Azure Static Web Apps (Production slot)
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "upload"
          app_location: "${{ env.FE_DIR }}/dist/apps/${{ matrix.app }}"
          skip_app_build: true
          production_branch: 'main'



