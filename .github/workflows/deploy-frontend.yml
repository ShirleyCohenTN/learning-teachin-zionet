name: Deploy Frontend to Azure Static Web Apps

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      deployment_token:
        description: 'Azure Static Web Apps deployment token'
        required: false
        type: string
    secrets:
      AZURE_STATIC_WEB_APPS_API_TOKEN:
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install and Build
        run: |
          cd frontend
          echo "=== Environment Variables Debug ==="
          echo "VITE_AZURE_SPEECH_KEY: ${VITE_AZURE_SPEECH_KEY:0:10}..." 
          echo "VITE_AZURE_OPENAI_KEY: ${VITE_AZURE_OPENAI_KEY:0:10}..."
          echo "VITE_AZURE_REGION: $VITE_AZURE_REGION"
          echo "VITE_AZURE_OPENAI_ENDPOINT: $VITE_AZURE_OPENAI_ENDPOINT"
          echo "VITE_APPINSIGHTS_CONNECTION_STRING: ${VITE_APPINSIGHTS_CONNECTION_STRING:0:20}..."
          echo "VITE_SENTRY_DSN: ${VITE_SENTRY_DSN:0:20}..."
          echo "================================"
          
          npm ci
          
          echo "=== Vite Environment Variables Debug ==="
          echo "Creating temporary debug file to test Vite env vars..."
          echo "console.log('VITE_AZURE_SPEECH_KEY:', import.meta.env.VITE_AZURE_SPEECH_KEY);" > debug-env.js
          echo "console.log('VITE_AZURE_OPENAI_KEY:', import.meta.env.VITE_AZURE_OPENAI_KEY);" >> debug-env.js
          echo "console.log('All import.meta.env:', import.meta.env);" >> debug-env.js
          
          npm run build
          
          echo "=== Build Output Debug ==="
          echo "Build completed, checking output..."
          ls -la dist/
          echo "=== Checking built index.html ==="
          cat dist/index.html
          echo "=== Build folder size ==="
          du -sh dist/
          echo "=== Largest files ==="
          find dist -type f -exec du -h {} + | sort -rh | head -20
          
          echo "=== Checking for environment variables in built files ==="
          echo "Looking for actual API key values in built files..."
          grep -r "BCyTfNEF3B" dist/ && echo "✅ Speech key found" || echo "❌ Speech key NOT found"
          grep -r "GFNGoZY5e5" dist/ && echo "✅ OpenAI key found" || echo "❌ OpenAI key NOT found"
          grep -r "france-teachin-open-ai" dist/ && echo "✅ OpenAI endpoint found" || echo "❌ OpenAI endpoint NOT found"
          echo "Searching for undefined values..."
          grep -r "undefined" dist/assets/*.js | head -5
          
          # Aggressive cleanup to reduce size
          find dist -name "*.map" -delete
          find dist -name "*.md" -delete
          find dist -name "*.txt" -delete
          find dist -name "*.LICENSE" -delete
          # Remove any large vendor files if they exist
          find dist -name "*vendor*" -size +1M -delete
          # Compress large JS files if needed
          find dist -name "*.js" -size +1M -exec gzip -f {} \; -exec mv {}.gz {} \;
          echo "=== Size after aggressive cleanup ==="
          du -sh dist/
          echo "=== Final file count ==="
          find dist -type f | wc -l
        env:
          VITE_AZURE_SPEECH_KEY: ${{ secrets.VITE_AZURE_SPEECH_KEY }}
          VITE_AZURE_REGION: "eastus"
          VITE_AZURE_OPENAI_KEY: ${{ secrets.VITE_AZURE_OPENAI_KEY }}
          VITE_AZURE_OPENAI_DEPLOYMENT_NAME: "gpt-4.1-mini"
          VITE_AZURE_OPENAI_API_VERSION: "2024-04-01-preview"
          VITE_AZURE_OPENAI_ENDPOINT: "https://france-teachin-open-ai.openai.azure.com/"
          VITE_APPINSIGHTS_CONNECTION_STRING: ${{ secrets.VITE_APPINSIGHTS_CONNECTION_STRING }}
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ inputs.deployment_token || secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "upload"
          app_location: "frontend/dist"
          output_location: ""
          skip_app_build: true

      - name: Debug Deployment
        run: |
          echo "=== Deployment completed ==="
          echo "If you're seeing a black screen, check the browser console for errors:"
          echo "1. Open browser dev tools (F12)"
          echo "2. Go to Console tab"
          echo "3. Look for red error messages"
          echo "4. Check Network tab for failed requests"
          echo ""
          echo "Common issues to look for:"
          echo "- 'Failed to fetch' errors (API connectivity)"
          echo "- 'undefined' environment variables"
          echo "- CORS errors"
          echo "- 404 errors for missing assets"





