name: Manual Deploy Existing Images

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment'
        required: true
        default: 'Development'
        type: choice
        options:
          - Development
          - Production
      environment_name:
        description: 'Namespace/environment name (e.g., dev, prod)'
        required: true
        type: string
      service:
        description: 'Service to update (or "all")'
        required: true
        default: 'all'
        type: choice
        options: [all, accessor, manager, engine]
      image_hashes:
        description: 'Comma-separated short hashes (e.g., abc1234,def5678,ghi9012 for all)'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }} \
            --overwrite-existing

      - name: Deploy selected images
        run: |
          SERVICES=("accessor" "manager" "engine")
          IFS=',' read -ra HASHES <<< "${{ github.event.inputs.image_hashes }}"
          NAMESPACE="${{ github.event.inputs.environment_name }}"
          SELECTED="${{ github.event.inputs.service }}"

          if [[ "$SELECTED" == "all" ]]; then
            for i in "${!SERVICES[@]}"; do
              SERVICE="${SERVICES[$i]}"
              HASH="${HASHES[$i]// /}"  # Remove spaces

              if [ -z "$HASH" ]; then
                echo "Missing hash for $SERVICE"
                exit 1
              fi

              echo "Updating $SERVICE to $HASH in namespace $NAMESPACE"
              helm upgrade $SERVICE ./chart \
                --install \
                --namespace "$NAMESPACE" \
                --set ${SERVICE}.image.name=${{ secrets.DOCKER_USERNAME }}/$SERVICE \
                --set ${SERVICE}.image.tag="$HASH" \
                --set ${SERVICE}.image.altTag="$NAMESPACE"
            done
          else
            SERVICE="$SELECTED"
            HASH="${HASHES[0]// /}"

            echo "Updating $SERVICE to $HASH in namespace $NAMESPACE"
            helm upgrade $SERVICE ./chart \
              --install \
              --namespace "$NAMESPACE" \
              --set ${SERVICE}.image.name=${{ secrets.DOCKER_USERNAME }}/$SERVICE \
              --set ${SERVICE}.image.tag="$HASH" \
              --set ${SERVICE}.image.altTag="$NAMESPACE"
          fi
