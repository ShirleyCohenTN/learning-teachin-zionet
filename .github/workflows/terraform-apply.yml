name: Terraform Apply (Dynamic Environment)

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    outputs:
      static_web_app_api_token:
        description: "Azure Static Web Apps deployment token"
        value: ${{ jobs.aks-terraform.outputs.static_web_app_api_token }}
      app_insights_connection_string:
        description: "Application Insights connection string"
        value: ${{ jobs.aks-terraform.outputs.app_insights_connection_string }}
  workflow_dispatch:
    inputs:
     environment:
        description: 'Enter environment name'
        required: true
        default: 'Development'
        type: string


jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: Development
    permissions:
      id-token: write      # Required for OIDC login
      contents: read       # For actions/checkout
    
    outputs:
      static_web_app_api_token: ${{ steps.terraform_outputs.outputs.static_web_app_api_token }}
      app_insights_connection_string: ${{ steps.terraform_outputs.outputs.app_insights_connection_string }}

    env:
      ARM_USE_OIDC: "true" # tell provider to use the OIDC token
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_AZUREAD: "true" # matches `use_azuread_auth = true`

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set Terraform working directory
        run: echo "TF_DIR=./devops/terraform" >> $GITHUB_ENV

      - name: Extract and validate environment variables
        id: extract_env
        run: |
          case "${{ inputs.environment }}" in
            "Development")
              SHORT_ENV="dev"
              ENVIRONMENT_NAME="dev"
              TFVARS_FILE="terraform.tfvars.dev"
              ;;
            "Production")
              SHORT_ENV="prod"
              ENVIRONMENT_NAME="prod"
              TFVARS_FILE="terraform.tfvars.prod"
              ;;
            *)
              # Support custom environments (feature branches || testing)
              SHORT_ENV="${{ inputs.environment }}"
              ENVIRONMENT_NAME="${{ inputs.environment }}"
              TFVARS_FILE="terraform.tfvars.template"
              ;;
          esac
          
          echo "short_env=$SHORT_ENV" >> $GITHUB_ENV
          echo "environment_name=$ENVIRONMENT_NAME" >> $GITHUB_ENV
          echo "TFVARS_FILE=$TFVARS_FILE" >> $GITHUB_ENV

      - name: Generate dynamic backend key
        run: |
          BACKEND_KEY="${{ env.environment_name }}.terraform.tfstate"
          echo "backend_key=$BACKEND_KEY" >> $GITHUB_ENV

      - name: Terraform Init with dynamic backend
        run: |
          terraform init \
            -backend-config="key=${{ env.backend_key }}" \
            -reconfigure
        working-directory: ${{ env.TF_DIR }}
      
      - name: Terraform vars file
        working-directory: ${{ env.TF_DIR }}
        run: |
          if [ -f "${{ env.TFVARS_FILE }}" ] && [ "${{ env.TFVARS_FILE }}" == "terraform.tfvars.template" ]; then
            cat <<EOF > terraform.tfvars.template
          environment_name = "${{ env.environment_name }}"
          kubernetes_namespace = "${{ env.environment_name }}"
          EOF
          fi

          cat ${{ env.TFVARS_FILE }}
 
      - name: Terraform Plan
        run: terraform plan -var-file=${{ env.TFVARS_FILE }}
        working-directory: ${{ env.TF_DIR }}

      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file=${{ env.TFVARS_FILE }}
        working-directory: ${{ env.TF_DIR }}

      - name: Extract Terraform Outputs
        id: terraform_outputs
        run: |
          # Extract outputs for frontend deployment
          echo "static_web_app_api_token=$(terraform output -raw static_web_app_api_key)" >> $GITHUB_OUTPUT
          echo "app_insights_connection_string=$(terraform output -raw application_insights_connection_string)" >> $GITHUB_OUTPUT
        working-directory: ${{ env.TF_DIR }}