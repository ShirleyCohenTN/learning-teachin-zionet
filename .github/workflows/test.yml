name: Build and push DemoCuest images

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

jobs:
  deploy:
    environment: Development
    runs-on: ubuntu-latest

    permissions:
      id-token: write      # Required for OIDC login
      contents: read       # Required for actions/checkout

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure resource group and ACR exist
        run: |
          RG_NAME=democuest-acr
          LOCATION=westeurope
          ACR_NAME=aks-democuest12345

          az group create --name $RG_NAME --location $LOCATION

          if ! az acr show --name $ACR_NAME --resource-group $RG_NAME &>/dev/null; then
            az acr create --resource-group $RG_NAME --name $ACR_NAME --sku Basic --location $LOCATION
          fi

          echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV
          echo "ACR_LOGIN_SERVER=$ACR_NAME.azurecr.io" >> $GITHUB_ENV

      - name: Docker login to ACR
        run: |
          az acr login --name $ACR_NAME

      - name: Build and Push Images
        run: |
          declare -A services=(
            ["todoaccessor"]="Accessors/ToDoAccessor"
            ["todomanager"]="Managers/TodoManager"
            ["notificationmanager"]="Managers/NotificationManager"
          )
          ROOT_DIR="devops/kubernetes/DemoCuest"
          for name in "${!services[@]}"; do
            relpath="${services[$name]}"
            context="$ROOT_DIR"
            dockerfile="$ROOT_DIR/$relpath/Dockerfile"
            image="$ACR_LOGIN_SERVER/$name:latest"
            echo "Building $image from $dockerfile (context $context)..."
            docker build -t "$image" -f "$dockerfile" "$context"
            echo "Pushing $image..."
            docker push "$image"
          done
