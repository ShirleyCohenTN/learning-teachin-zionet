name: AKS - Deploy Current Backend Images to Cloud
# Builds and pushs current backend images (from current main) into dockerhub(later to be changed to acr) and deploys to AKS in cloud
on:
  # push:
  #   branches: [ main ]
  #   paths:
  #     - 'backend/**'  # Only trigger for Azure backend changes
  #     # - '.github/workflows/build-and-push-images.yaml'  # Trigger on workflow changes
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment'
        required: true
        default: 'Development'
        type: choice
        options:
          - Development
          - Production
      environment_name:
        description: 'Enter custom prefix (used for Kubernetes namespace, etc.)'
        required: true
        type: string
        default: 'dev'
      list_services_names:
        description: 'Optional comma-separated list of services to build (e.g., accessor,manager). Leave empty for all.'
        required: false
        type: string
        default: ''

jobs:
  build-and-push-images:
    uses: ./.github/workflows/build-and-push-images.yaml
    permissions:
      id-token: write
      contents: read
    with:
      environment: ${{ github.event.inputs.environment }}
      environment_name: ${{ github.event.inputs.environment_name }}
      list_services_names: ${{ github.event.inputs.list_services_names }}
    secrets: inherit

  restart-pods:
    needs: [build-and-push-images]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up variables
        run: |
          echo "AKS_RG=dev-zionet-learning-2025" >> $GITHUB_ENV
          echo "AKS_NAME=aks-cluster-dev" >> $GITHUB_ENV

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group $AKS_RG --name $AKS_NAME --overwrite-existing

      - name: Check cluster status
        run: |
          STATUS=$(az aks show --resource-group $AKS_RG --name $AKS_NAME --query "powerState.code" -o tsv)
          echo "AKS cluster status: $STATUS"
          if [[ "$STATUS" != "Running" ]]; then
            echo "‚ùå Cluster is not running. Status: $STATUS"
            echo "Please start the cluster first before restarting pods."
            exit 1
          fi

      - name: Show current pods status
        run: |
          echo "üìä Current pods in dev namespace:"
          kubectl get pods -n dev -o wide || echo "No pods found or namespace doesn't exist"

      - name: Restart all pods in dev namespace
        run: |
          echo "üîÑ Restarting all pods in dev namespace..."
          kubectl delete pod --all -n dev
          echo "‚úÖ All pods in dev namespace have been deleted and will be recreated"

      - name: Wait for pods to be recreated
        run: |
          echo "‚è≥ Waiting for pods to be recreated..."
          sleep 10
          
          # Wait for pods to be in Running state
          for i in {1..20}; do
            READY_PODS=$(kubectl get pods -n dev --field-selector=status.phase=Running --no-headers 2>/dev/null | wc -l)
            TOTAL_PODS=$(kubectl get pods -n dev --no-headers 2>/dev/null | wc -l)
            
            echo "Attempt $i: $READY_PODS/$TOTAL_PODS pods are running"
            
            if [[ $TOTAL_PODS -gt 0 ]]; then
              # Check if all pods are ready
              NOT_READY=$(kubectl get pods -n dev --no-headers 2>/dev/null | grep -v "Running\|Completed" | wc -l)
              if [[ $NOT_READY -eq 0 ]]; then
                echo "‚úÖ All pods are running successfully"
                break
              fi
            fi
            
            if [[ $i -eq 20 ]]; then
              echo "‚ö†Ô∏è Timeout waiting for all pods to be ready"
              kubectl get pods -n dev -o wide
            else
              sleep 15
            fi
          done

      - name: Show final pods status
        run: |
          echo "üìä Final pods status in dev namespace:"
          kubectl get pods -n dev -o wide

      - name: Check services
        run: |
          echo "üîç Services in dev namespace:"
          kubectl get svc -n dev -o wide