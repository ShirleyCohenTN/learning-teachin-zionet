name: AKS - Deploy Current Backend Images to Cloud
# Builds and pushs current backend images (from current main) into dockerhub(later to be changed to acr) and deploys to AKS in cloud
on:
  # push:
  #   branches: [ main ]
  #   paths:
  #     - 'backend/**'  # Only trigger for Azure backend changes
  #     # - '.github/workflows/build-and-push-images.yaml'  # Trigger on workflow changes
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment'
        required: true
        default: 'Development'
        type: choice
        options:
          - Development
          - Production
      environment_name:
        description: 'Enter custom prefix (used for Kubernetes namespace, etc.)'
        required: true
        type: string
        default: 'dev'
      list_services_names:
        description: 'Optional comma-separated list of services to build (e.g., accessor,manager). Leave empty for all.'
        required: false
        type: string
        default: ''

jobs:
  build-and-push-images:
    uses: ./.github/workflows/build-and-push-images.yaml
    permissions:
      id-token: write
      contents: read
    with:
      environment: ${{ github.event.inputs.environment }}
      environment_name: ${{ github.event.inputs.environment_name }}
      list_services_names: ${{ github.event.inputs.list_services_names }}
    secrets: inherit

  deploy-with-new-images:
    needs: [build-and-push-images]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up variables
        run: |
          echo "AKS_RG=dev-zionet-learning-2025" >> $GITHUB_ENV
          echo "AKS_NAME=aks-cluster-dev" >> $GITHUB_ENV
          
          # Get the new commit hash for image tagging
          SHORT_SHA="${{ github.sha }}"
          SHORT_SHA="${SHORT_SHA:0:7}"
          echo "NEW_IMAGE_TAG=${SHORT_SHA}" >> $GITHUB_ENV
          echo "New image tag will be: ${SHORT_SHA}"

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group $AKS_RG --name $AKS_NAME --overwrite-existing

      - name: Check cluster status
        run: |
          STATUS=$(az aks show --resource-group $AKS_RG --name $AKS_NAME --query "powerState.code" -o tsv)
          echo "AKS cluster status: $STATUS"
          if [[ "$STATUS" != "Running" ]]; then
            echo "Cluster is not running. Status: $STATUS"
            echo "Please start the cluster first before restarting pods."
            exit 1
          fi

      - name: Show current pods status
        run: |
          echo "Current pods in ${{ github.event.inputs.environment_name }} namespace:"
          kubectl get pods -n ${{ github.event.inputs.environment_name }} -o custom-columns=NAME:.metadata.name,IMAGE:.spec.containers[0].image,STATUS:.status.phase || echo "No pods found or namespace doesn't exist"

      - name: Deploy with new commit hash using Helm
        run: |
          echo "Deploying with new image tag: $NEW_IMAGE_TAG"
          echo "Updating images in namespace: ${{ github.event.inputs.environment_name }}"
          
          # Check if release exists, if not install, otherwise upgrade
          if helm list -n ${{ github.event.inputs.environment_name }} | grep -q "teachin-app"; then
            echo "ðŸ“¦ Upgrading existing release..."
            helm upgrade teachin-app ./devops/kubernetes/charts \
              --namespace ${{ github.event.inputs.environment_name }} \
              --set global.dockerRegistry=teachindevacr.azurecr.io \
              --set global.environment=$NEW_IMAGE_TAG \
              --set namespace.name=${{ github.event.inputs.environment_name }} \
              --wait --timeout=5m \
              --atomic
          else
            echo "ðŸš€ Installing new release..."
            helm install teachin-app ./devops/kubernetes/charts \
              --namespace ${{ github.event.inputs.environment_name }} \
              --create-namespace \
              --set global.dockerRegistry=teachindevacr.azurecr.io \
              --set global.environment=$NEW_IMAGE_TAG \
              --set namespace.name=${{ github.event.inputs.environment_name }} \
              --wait --timeout=5m \
              --atomic
          fi
            
          echo "âœ… Deployment completed with image tag: $NEW_IMAGE_TAG"

      - name: Wait for deployment to complete
        run: |
          echo "Waiting for deployment to complete..."
          
          # Wait for all deployments to be ready
          kubectl wait --for=condition=available --timeout=300s deployment --all -n ${{ github.event.inputs.environment_name }}
          
          echo "âœ… All deployments are ready"

      - name: Verify new images are running
        run: |
          echo "Verifying new images with tag: $NEW_IMAGE_TAG"
          echo "Current pods in ${{ github.event.inputs.environment_name }} namespace:"
          kubectl get pods -n ${{ github.event.inputs.environment_name }} -o custom-columns=NAME:.metadata.name,IMAGE:.spec.containers[0].image,STATUS:.status.phase
          
          # Check if all pods are using the new image tag
          PODS_WITH_NEW_TAG=$(kubectl get pods -n ${{ github.event.inputs.environment_name }} -o jsonpath='{.items[*].spec.containers[0].image}' | grep -o "$NEW_IMAGE_TAG" | wc -l)
          TOTAL_PODS=$(kubectl get pods -n ${{ github.event.inputs.environment_name }} --no-headers | wc -l)
          
          echo "Pods using new tag ($NEW_IMAGE_TAG): $PODS_WITH_NEW_TAG/$TOTAL_PODS"
          
          if [[ $PODS_WITH_NEW_TAG -eq $TOTAL_PODS ]]; then
            echo "âœ… All pods are using the new image tag: $NEW_IMAGE_TAG"
          else
            echo "Some pods are not using the new image tag"
            kubectl get pods -n ${{ github.event.inputs.environment_name }} -o custom-columns=NAME:.metadata.name,IMAGE:.spec.containers[0].image
          fi

      - name: Show final deployment status
        run: |
          echo "Final deployment status in ${{ github.event.inputs.environment_name }} namespace:"
          kubectl get pods -n ${{ github.event.inputs.environment_name }} -o wide
          echo ""
          echo "Services in ${{ github.event.inputs.environment_name }} namespace:"
          kubectl get svc -n ${{ github.event.inputs.environment_name }} -o wide
          echo ""
          echo "Deployment Summary:"
          echo "âœ… Images updated to commit: $NEW_IMAGE_TAG"
          echo "âœ… Namespace: ${{ github.event.inputs.environment_name }}"
          echo "âœ… All pods are running with the latest code"