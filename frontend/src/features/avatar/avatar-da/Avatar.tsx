/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 src/public/avatar/avatar-da/models/687e38191c3d7336a8763d55.glb -o src/features/avatar/avatar-da/Avatar.tsx -r public 
*/

import * as THREE from 'three';
import React, { useEffect, useMemo, useState, type JSX } from 'react';
import { useFrame, useGraph, useLoader } from '@react-three/fiber';
import { useAnimations, useFBX, useGLTF } from '@react-three/drei';
import { type GLTF, SkeletonUtils } from 'three-stdlib';
import { useRef } from 'react';
import { useControls } from 'leva';

type ActionName = 'Idle' | 'Talking';

interface GLTFAction extends THREE.AnimationClip {
	name: ActionName;
}

type GLTFResult = GLTF & {
	nodes: {
		Wolf3D_Hair: THREE.SkinnedMesh;
		Wolf3D_Outfit_Top: THREE.SkinnedMesh;
		Wolf3D_Outfit_Bottom: THREE.SkinnedMesh;
		Wolf3D_Outfit_Footwear: THREE.SkinnedMesh;
		Wolf3D_Body: THREE.SkinnedMesh;
		EyeLeft: THREE.SkinnedMesh;
		EyeRight: THREE.SkinnedMesh;
		Wolf3D_Head: THREE.SkinnedMesh;
		Wolf3D_Teeth: THREE.SkinnedMesh;
		Hips: THREE.Bone;
	};
	materials: {
		Wolf3D_Hair: THREE.MeshStandardMaterial;
		Wolf3D_Outfit_Top: THREE.MeshStandardMaterial;
		Wolf3D_Outfit_Bottom: THREE.MeshStandardMaterial;
		Wolf3D_Outfit_Footwear: THREE.MeshStandardMaterial;
		Wolf3D_Body: THREE.MeshStandardMaterial;
		Wolf3D_Eye: THREE.MeshStandardMaterial;
		Wolf3D_Skin: THREE.MeshStandardMaterial;
		Wolf3D_Teeth: THREE.MeshStandardMaterial;
	};
	animations: GLTFAction[];
};

const corresponding = {
	A: 'viseme_PP',
	B: 'viseme_kk',
	C: 'viseme_I',
	D: 'viseme_AA',
	E: 'viseme_O',
	F: 'viseme_U',
	G: 'viseme_FF',
	H: 'viseme_TH',
	X: 'viseme_PP',
};

export function Avatar(props: JSX.IntrinsicElements['group']) {
	const {
		playAudio,
		script,
		headFollow,
		smoothMorphTarget,
		morphTargetSmoothing,
	} = useControls({
		playAudio: false,
		headFollow: true,
		smoothMorphTarget: true,
		morphTargetSmoothing: 0.5,
		script: {
			value: 'test_audio',
			options: ['test_audio', 'second_test_audio'],
		},
	});

	const audio = useMemo(
		() => new Audio(`/../src/public/avatar/avatar-da/audios/${script}.mp3`),
		[script]
	);
	const jsonFile = useLoader(
		THREE.FileLoader,
		`/../src/public/avatar/avatar-da/audios/${script}.json`
	);
	const lipsync = JSON.parse(
		typeof jsonFile === 'string' ? jsonFile : new TextDecoder().decode(jsonFile)
	);

	useFrame(() => {
		const currentAudioTime = audio.currentTime;
		if (audio.paused || audio.ended) {
			setAnimation('Idle');
			return;
		}

		Object.values(corresponding).forEach((value) => {
			if (!smoothMorphTarget) {
				nodes.Wolf3D_Head.morphTargetInfluences[
					nodes.Wolf3D_Head.morphTargetDictionary[value]
				] = 0;
				nodes.Wolf3D_Teeth.morphTargetInfluences[
					nodes.Wolf3D_Teeth.morphTargetDictionary[value]
				] = 0;
			} else {
				nodes.Wolf3D_Head.morphTargetInfluences[
					nodes.Wolf3D_Head.morphTargetDictionary[value]
				] = THREE.MathUtils.lerp(
					nodes.Wolf3D_Head.morphTargetInfluences[
						nodes.Wolf3D_Head.morphTargetDictionary[value]
					],
					0,
					morphTargetSmoothing
				);

				nodes.Wolf3D_Teeth.morphTargetInfluences[
					nodes.Wolf3D_Teeth.morphTargetDictionary[value]
				] = THREE.MathUtils.lerp(
					nodes.Wolf3D_Teeth.morphTargetInfluences[
						nodes.Wolf3D_Teeth.morphTargetDictionary[value]
					],
					0,
					morphTargetSmoothing
				);
			}
		});

		for (let i = 0; i < lipsync.mouthCues.length; i++) {
			const mouthCue = lipsync.mouthCues[i];
			if (
				currentAudioTime >= mouthCue.start &&
				currentAudioTime <= mouthCue.end
			) {
				if (!smoothMorphTarget) {
					nodes.Wolf3D_Head.morphTargetInfluences[
						nodes.Wolf3D_Head.morphTargetDictionary[
							corresponding[mouthCue.value]
						]
					] = 1;
					nodes.Wolf3D_Teeth.morphTargetInfluences[
						nodes.Wolf3D_Teeth.morphTargetDictionary[
							corresponding[mouthCue.value]
						]
					] = 1;
				} else {
					nodes.Wolf3D_Head.morphTargetInfluences[
						nodes.Wolf3D_Head.morphTargetDictionary[
							corresponding[mouthCue.value]
						]
					] = THREE.MathUtils.lerp(
						nodes.Wolf3D_Head.morphTargetInfluences[
							nodes.Wolf3D_Head.morphTargetDictionary[
								corresponding[mouthCue.value]
							]
						],
						1,
						morphTargetSmoothing
					);
					nodes.Wolf3D_Teeth.morphTargetInfluences[
						nodes.Wolf3D_Teeth.morphTargetDictionary[
							corresponding[mouthCue.value]
						]
					] = THREE.MathUtils.lerp(
						nodes.Wolf3D_Teeth.morphTargetInfluences[
							nodes.Wolf3D_Teeth.morphTargetDictionary[
								corresponding[mouthCue.value]
							]
						],
						1,
						morphTargetSmoothing
					);
				}

				break;
			}
		}
	});

	useEffect(() => {
		nodes.Wolf3D_Head.morphTargetInfluences[
			nodes.Wolf3D_Head.morphTargetDictionary['viseme_I']
		] = 1;
		nodes.Wolf3D_Teeth.morphTargetInfluences[
			nodes.Wolf3D_Teeth.morphTargetDictionary['viseme_I']
		] = 1;
		if (playAudio) {
			audio.play();
			if (script === 'test_audio') {
				setAnimation('Talking');
			} else {
				setAnimation('Talking');
			}
		} else {
			setAnimation('Idle');
			audio.pause();
		}
	}, [playAudio, script]);

	const { scene } = useGLTF(
		'/../src/public/avatar/avatar-da/models/687e38191c3d7336a8763d55.glb'
	);

	const { animations: idleAnimation } = useFBX(
		'/../src/public/avatar/avatar-da/animations/Idle.fbx'
	);
	const { animations: talkingAnimation } = useFBX(
		'/../src/public/avatar/avatar-da/animations/Talking.fbx'
	);

	idleAnimation[0].name = 'Idle';
	talkingAnimation[0].name = 'Talking';

	const [animation, setAnimation] = useState('Idle');
	const group = useRef<THREE.Group>(null);

	const { actions } = useAnimations(
		[idleAnimation[0], talkingAnimation[0]],
		group
	);

	useEffect(() => {
		if (actions[animation]) {
			actions[animation].reset().fadeIn(0.5).play();
			return () => {
				if (actions[animation]) {
					actions[animation].fadeOut(0.5);
				}
			};
		}
		return undefined;
	}, [animation]);

	const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
	const { nodes, materials } = useGraph(clone) as unknown as GLTFResult;

	useFrame((state) => {
		if (headFollow && group.current) {
			group.current.getObjectByName('Head')?.lookAt(state.camera.position);
		}
	});

	return (
		<group {...props} dispose={null} ref={group}>
			<primitive object={nodes.Hips} />
			<skinnedMesh
				geometry={nodes.Wolf3D_Hair.geometry}
				material={materials.Wolf3D_Hair}
				skeleton={nodes.Wolf3D_Hair.skeleton}
			/>
			<skinnedMesh
				geometry={nodes.Wolf3D_Outfit_Top.geometry}
				material={materials.Wolf3D_Outfit_Top}
				skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
			/>
			<skinnedMesh
				geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
				material={materials.Wolf3D_Outfit_Bottom}
				skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
			/>
			<skinnedMesh
				geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
				material={materials.Wolf3D_Outfit_Footwear}
				skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
			/>
			<skinnedMesh
				geometry={nodes.Wolf3D_Body.geometry}
				material={materials.Wolf3D_Body}
				skeleton={nodes.Wolf3D_Body.skeleton}
			/>
			<skinnedMesh
				name="EyeLeft"
				geometry={nodes.EyeLeft.geometry}
				material={materials.Wolf3D_Eye}
				skeleton={nodes.EyeLeft.skeleton}
				morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
				morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
			/>
			<skinnedMesh
				name="EyeRight"
				geometry={nodes.EyeRight.geometry}
				material={materials.Wolf3D_Eye}
				skeleton={nodes.EyeRight.skeleton}
				morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
				morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
			/>
			<skinnedMesh
				name="Wolf3D_Head"
				geometry={nodes.Wolf3D_Head.geometry}
				material={materials.Wolf3D_Skin}
				skeleton={nodes.Wolf3D_Head.skeleton}
				morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
				morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
			/>
			<skinnedMesh
				name="Wolf3D_Teeth"
				geometry={nodes.Wolf3D_Teeth.geometry}
				material={materials.Wolf3D_Teeth}
				skeleton={nodes.Wolf3D_Teeth.skeleton}
				morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
				morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
			/>
		</group>
	);
}

useGLTF.preload(
	'/../src/public/avatar/avatar-da/models/687e38191c3d7336a8763d55.glb'
);
