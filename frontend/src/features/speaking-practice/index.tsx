import { useRef, useState } from 'react';

import * as sdk from 'microsoft-cognitiveservices-speech-sdk';

import { useStyles } from './style';

const phrases = [
	'◊©◊ú◊ï◊ù',
	'◊©◊ú◊ï◊ù, ◊ê◊ô◊ö ◊ê◊™◊î ◊û◊®◊í◊ô◊© ◊î◊ô◊ï◊ù?',
	'◊û◊î ◊ê◊™◊î ◊ê◊ï◊î◊ë ◊ú◊¢◊©◊ï◊™ ◊ë◊°◊ï◊£ ◊î◊©◊ë◊ï◊¢?',
	'◊°◊§◊® ◊ú◊ô ◊¢◊ú ◊î◊û◊©◊§◊ó◊î ◊©◊ú◊ö.',
	'◊û◊î◊ï ◊î◊°◊§◊® ◊î◊ê◊î◊ï◊ë ◊¢◊ú◊ô◊ö ◊ï◊ú◊û◊î?',
	'◊û◊î◊ï ◊î◊°◊®◊ò ◊î◊ê◊ó◊®◊ï◊ü ◊©◊®◊ê◊ô◊™ ◊ï◊û◊î ◊ó◊©◊ë◊™ ◊¢◊ú◊ô◊ï?',
	'◊û◊î◊ï ◊î◊û◊ß◊ï◊ù ◊î◊ê◊î◊ï◊ë ◊¢◊ú◊ô◊ö ◊ú◊ë◊ß◊® ◊ë◊ï ◊ë◊ô◊©◊®◊ê◊ú?',
	'◊û◊î◊ï ◊î◊û◊ê◊õ◊ú ◊î◊ê◊î◊ï◊ë ◊¢◊ú◊ô◊ö ◊ï◊ú◊û◊î?',
	'◊û◊î◊ï ◊î◊™◊ó◊ë◊ô◊ë ◊©◊ú◊ö ◊ï◊ê◊ô◊ö ◊î◊™◊ó◊ú◊™ ◊ë◊ï?',
	'◊û◊î◊ï ◊î◊ó◊ú◊ï◊ù ◊©◊ú◊ö ◊ú◊¢◊™◊ô◊ì?',
	'◊û◊î◊ï ◊î◊†◊ï◊©◊ê ◊î◊ê◊î◊ï◊ë ◊¢◊ú◊ô◊ö ◊ë◊ú◊ô◊û◊ï◊ì◊ô◊ù?',
	'◊û◊î◊ï ◊î◊°◊§◊ï◊®◊ò ◊î◊ê◊î◊ï◊ë ◊¢◊ú◊ô◊ö ◊ï◊ú◊û◊î?',
];

const phrasesWithNikud = [
	'◊©÷∏◊Å◊ú◊ï÷π◊ù',
	'◊©÷∏◊Å◊ú◊ï÷π◊ù, ◊ê÷µ◊ô◊ö÷∞ ◊ê÷∑◊™÷∏÷º◊î ◊û÷∑◊®÷∞◊í÷¥÷º◊ô◊©◊Å ◊î÷∑◊ô÷º◊ï÷π◊ù?',
	'◊û÷∏◊î ◊ê÷∑◊™÷∏÷º◊î ◊ê◊ï÷π◊î÷µ◊ë ◊ú÷∑◊¢÷≤◊©◊Ç◊ï÷π◊™ ◊ë÷∞÷º◊°◊ï÷π◊£ ◊î÷∑◊©÷∏÷º◊Å◊ë◊ï÷º◊¢÷∑?',
	'◊°÷∑◊§÷µ÷º◊® ◊ú÷¥◊ô ◊¢÷∑◊ú ◊î÷∑◊û÷¥÷º◊©÷∞◊Å◊§÷∏÷º◊ó÷∏◊î ◊©÷∂◊Å◊ú÷∞÷º◊ö÷∏.',
	'◊û÷∏◊î◊ï÷º ◊î÷∑◊°÷µ÷º◊§÷∂◊® ◊î÷∏◊ê÷∏◊î◊ï÷º◊ë ◊¢÷∏◊ú÷∂◊ô◊ö÷∏ ◊ï÷º◊ú÷∞◊û÷∏◊î?',
	'◊û÷∏◊î◊ï÷º ◊î÷∑◊°÷∂÷º◊®÷∂◊ò ◊î÷∏◊ê÷∑◊ó÷≤◊®◊ï÷π◊ü ◊©÷∂◊Å◊®÷∏◊ê◊ï÷¥◊ô◊™ ◊ï÷º◊û÷∏◊î ◊ó÷∏◊©÷∑◊Å◊ë÷∞◊™÷∏÷º ◊¢÷∏◊ú÷∏◊ô◊ï?',
	'◊û÷∏◊î◊ï÷º ◊î÷∑◊û÷∏÷º◊ß◊ï÷π◊ù ◊î÷∏◊ê÷∏◊î◊ï÷º◊ë ◊¢÷∏◊ú÷∂◊ô◊ö÷∏ ◊ú÷∞◊ë÷∑◊ß÷µ÷º◊® ◊ë÷º◊ï÷π ◊ë÷∞÷º◊ô÷¥◊©÷∞◊Ç◊®÷∏◊ê÷µ◊ú?',
	'◊û÷∏◊î◊ï÷º ◊î÷∑◊û÷∑÷º◊ê÷≤◊õ÷∏◊ú ◊î÷∏◊ê÷∏◊î◊ï÷º◊ë ◊¢÷∏◊ú÷∂◊ô◊ö÷∏ ◊ï÷º◊ú÷∞◊û÷∏◊î?',
	'◊û÷∏◊î◊ï÷º ◊î÷∑◊™÷∑÷º◊ó÷∞◊ë÷¥÷º◊ô◊ë ◊©÷∂◊Å◊ú÷∞÷º◊ö÷∏ ◊ï÷∞◊ê÷µ◊ô◊ö÷∞ ◊î÷¥◊™÷∞◊ó÷∑◊ú÷∞◊™÷∏÷º ◊ë÷º◊ï÷π?',
	'◊û÷∏◊î◊ï÷º ◊î÷∑◊ó÷≤◊ú◊ï÷π◊ù ◊©÷∂◊Å◊ú÷∞÷º◊ö÷∏ ◊ú÷∑◊¢÷≤◊™÷¥◊ô◊ì?',
	'◊û÷∏◊î◊ï÷º ◊î÷∑◊†÷º◊ï÷π◊©÷µ◊Ç◊ê ◊î÷∏◊ê÷∏◊î◊ï÷º◊ë ◊¢÷∏◊ú÷∂◊ô◊ö÷∏ ◊ë÷∞÷º◊ú÷¥◊û÷º◊ï÷º◊ì÷¥◊ô◊ù?',
	'◊û÷∏◊î◊ï÷º ◊î÷∑◊°÷∞÷º◊§◊ï÷π◊®÷∞◊ò ◊î÷∏◊ê÷∏◊î◊ï÷º◊ë ◊¢÷∏◊ú÷∂◊ô◊ö÷∏ ◊ï÷º◊ú÷∞◊û÷∏◊î?',
];

const Feedback = {
	Perfect: 'Perfect!',
	TryAgain: 'Try again, that was not accurate.',
	RecognitionError: 'Speech recognition error.',
	None: '',
} as const;

type FeedbackType = (typeof Feedback)[keyof typeof Feedback];

export const SpeakingPractice = () => {
	const classes = useStyles();

	const [showNikud, setShowNikud] = useState(false);
	const [currentIdx, setCurrentIdx] = useState(0);
	const [feedback, setFeedback] = useState<FeedbackType>(Feedback.None);
	const [isCorrect, setIsCorrect] = useState<boolean | null>(null);
	const [isRecording, setIsRecording] = useState(false);
	const [isSpeaking, setIsSpeaking] = useState(false);

	const recognizerRef = useRef<sdk.SpeechRecognizer | null>(null); // for speech recognition from microphone
	const audioConfigRef = useRef<sdk.AudioConfig | null>(null); // for audio input/output from microphone/speaker
	const synthesizerRef = useRef<sdk.SpeechSynthesizer | null>(null); // for TTS synthesis
	const playerRef = useRef<sdk.SpeakerAudioDestination | null>(null); // for TTS playback

	const speechConfig = sdk.SpeechConfig.fromSubscription(
		import.meta.env.VITE_AZURE_SPEECH_KEY!,
		import.meta.env.VITE_AZURE_REGION!
	);

	speechConfig.speechSynthesisVoiceName = 'he-IL-HilaNeural';
	speechConfig.speechRecognitionLanguage = 'he-IL';

	const comparePhrases = (
		userPhrase: string,
		targetPhrase: string
	): boolean => {
		const normalize = (str: string = '') =>
			str.replace(/[^\p{L}\p{N}\s]/gu, '').trim();

		return normalize(userPhrase) === normalize(targetPhrase);
	};

	const stopSynthesis = () => {
		if (synthesizerRef.current) {
			synthesizerRef.current.close();
			synthesizerRef.current = null;
		}
		if (playerRef.current) {
			playerRef.current.pause();
			playerRef.current.close();
			playerRef.current = null;
		}
		setIsSpeaking(false);
	};

	const stopRecognition = () => {
		if (recognizerRef.current) {
			recognizerRef.current.close();
			recognizerRef.current = null;
		}
		if (audioConfigRef.current) {
			audioConfigRef.current.close();
			audioConfigRef.current = null;
		}
		setIsRecording(false);
	};

	const handleRecord = () => {
		if (isRecording) {
			stopRecognition();
			return;
		}
		if (isSpeaking) return;
		setFeedback(Feedback.None);

		const audioConfig = sdk.AudioConfig.fromDefaultMicrophoneInput();
		const recognizer = new sdk.SpeechRecognizer(speechConfig, audioConfig);
		audioConfigRef.current = audioConfig;
		recognizerRef.current = recognizer;
		setIsRecording(true);

		recognizer.recognizeOnceAsync(
			(result) => {
				const userText = result.text ?? '';
				const correct = comparePhrases(userText, phrases[currentIdx]);
				setIsCorrect(correct);
				setFeedback(correct ? Feedback.Perfect : Feedback.TryAgain);
				stopRecognition();
			},
			(err) => {
				console.error('Recognition error:', err);
				setIsCorrect(false);
				setFeedback(Feedback.RecognitionError);
				stopRecognition();
			}
		);
	};

	const handlePlay = () => {
		if (isSpeaking) {
			stopSynthesis();
			return;
		}
		const player = new sdk.SpeakerAudioDestination();
		playerRef.current = player;

		player.onAudioStart = () => setIsSpeaking(true);
		player.onAudioEnd = () => {
			setIsSpeaking(false);
			player.close();
			playerRef.current = null;
		};

		const audioConfig = sdk.AudioConfig.fromSpeakerOutput(player);
		const synthesizer = new sdk.SpeechSynthesizer(speechConfig, audioConfig);
		synthesizerRef.current = synthesizer;

		synthesizer.speakTextAsync(
			phrases[currentIdx],
			() => {
				synthesizer.close();
				synthesizerRef.current = null;
			},
			(err) => {
				console.error('TTS error:', err);
				synthesizer.close();
				synthesizerRef.current = null;
			}
		);
	};

	const goPrev = () => {
		stopSynthesis();
		stopRecognition();
		setCurrentIdx((i) => (i === 0 ? phrases.length - 1 : i - 1));
		setFeedback(Feedback.None);
		setIsCorrect(null);
	};

	const goNext = () => {
		stopSynthesis();
		stopRecognition();
		setCurrentIdx((i) => (i + 1) % phrases.length);
		setFeedback(Feedback.None);
		setIsCorrect(null);
	};

	return (
		<div className={classes.container}>
			<div className={classes.nav}>
				<button onClick={goPrev}>&laquo; Prev</button>
				<span>
					{currentIdx + 1} / {phrases.length}
				</span>
				<button onClick={goNext}>Next &raquo;</button>
			</div>

			<div className={classes.main}>
				<h2 className={classes.phrase}>
					{showNikud ? phrasesWithNikud[currentIdx] : phrases[currentIdx]}
				</h2>

				<p
					className={`${classes.feedback} ${isCorrect ? 'correct' : 'incorrect'}`}
				>
					{feedback}
				</p>
			</div>

			<div className={classes.controls}>
				<button onClick={handlePlay}>
					{isSpeaking ? '‚èπ Stop' : '‚ñ∂ Play'}
				</button>
				<button onClick={handleRecord}>
					{isRecording ? '‚èπ Stop' : 'üé§ Record'}
				</button>
				<button onClick={() => setShowNikud(!showNikud)}>
					{showNikud ? 'Hide Nikud' : 'Show Nikud'}
				</button>
			</div>
		</div>
	);
};
